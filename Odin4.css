/*
//Grid
One advantage for developers is if they start off with only one row of items, 
they can simply add additional rows later.

Grid can make items to match even size easier
Grid does not replace flex, it has its used and can be used together

gird works on 2 directions the horizontal and vertical
flexbox works on one direction row or column

grid can optionally wrap if we allow auto filling
to fill a row and move on the new row
the parent does all the work to children not like flexbox, children does their work
good at overlapping using z-index
aligns rows/columns as you tell it
>layout

flexbox,
can align elements along a baseline
can push things away using margin auto
>alignment

display:grid
automatically all level one child elements will become grid items






*/




.parent {
    display: grid;
    grid-template-columns: 1fr 3fr 1fr; /* Three columns, one three times as wide as the others */
    grid-template-rows: 200px auto 100px; /* Three rows, two with explicit widths */
    grid-template-areas:
      "header header header"
      ". main sidebar"
      "footer . .";
  }
  
  /*
    Now, we can explicitly place items in the defined rows and columns.
  */
  .child-1 {
    grid-area: header;
  }
  
  .child-2 {
    grid-area: main;
  }
  
  .child-3 {
    grid-area: sidebar;
  }
  
  .child-4 {
    grid-area: footer;
  }



/*part 1*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/


  /* // setting the grid parent properties // */
  .grid_container {
    display: grid;
    /* display: inline-grid; */

    grid-template-rows: [line1-name] 100px [line2-name] 100px [line2-name] 100px; /*quantity and height of rows */
    grid-template-columns: repeat(3, 1fr); /*quantity and width of columns */
    /* also can use %ages or fr(fraction of the available space) for flexible sizes
    20px repeat(3, 1fr); 20px followed by 3 1fr
    20px repeat(3, 1fr 2fr); 20 px followed by 3 x 1fr 2fr
    minmax(100px, auto);    //rows for example min of 100px and auto(remaining space) 
    can name each line before its area within [], can be repeated, name like header-start etc.
    */
    /* grid-template: row/columns*/
    /*grid-template: 50px 50px / 50px 50px 50px;*/
    
    /*till here all children will be placed in the specified quantities
    and more than defined children will occupy a new row according to the specified column-width above 
    implicit will wrap to a new row */

    
    /* allow implicit new children to be added in new columns not new rows */
    /* grid-auto-flow: column; */


    /*add style for any new added row/columns automatically any implicit */
    /*grid-auto-rows: 10px;*/
/*  grid-auto-columns: 50px;
    to be used with grid-auto-flow: column*/


    /* Gaps */
    column-gap: 0px;
    row-gap: 0px;
    gap: 0px 0px; /* row/column*/

}

.grid_container > div {
    border: 1px solid blue;
}

  /* // setting the place/size of a child // */
.box1 {
    /*grid has lines from ltr starts from border 1 to last border
    also can leave empty spaces in the grid 
    also if one track is used, can skip using -end or grid-column without 2nd slash 
    also can use implicit(undeclared) position number to place outside declared row/col */
    
    /*instead of numbers can use */
    /*block-start/end are the 1st column and the last */
    /*inline-start/end are the 1st row and the last */
    /* when counting backwards use - sign -1(first from end) etc, can be use 1/-1 to stretch */
    /* 1/span 3, starts 1 and counts 3 lines after that */
    /*span 3/4, ends at 4 and spans 3 lines before it */

    grid-column-start: 1;
    grid-column-end: 3;
    /*similarly*/
    grid-column: 1/3;


    grid-row-start: line1-name 1; /*the line name from parent and specify if this name is repeated in parent */
    grid-row-end: 2;
    /*similarly*/
    grid-row: 1/2;

    /*similarly*/
    /* row-start / column-start / row-end / column-end */
    grid-area: 1 / 1 / 2 / span 2;



    /*can make a child also a grid */
    display: grid;
    grid-template-columns: subgrid; 
    /*
    use the track definition of the parent grid.
    grid-template-columns: subgrid;
    */
    background: #38CFD9;

    /* control the order */
    z-index: 2;

}

/*box2 overlaps box1*/
.box2 {
    grid-column: 3 / inline-end;
    grid-row: 3 / 4;    /*undeclared-explicit position and gap rows will be taken from grid-auto-rows height */
    background: #4d93a4;

    /* control the order */
    z-index: 1;

}

/*part 2*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*
grid tracks; single row or column on a grid


*/

  /* // another way for setting the place/size of a child // */

.grid_container2 {

    display: inline-grid;
    grid-template-columns: repeat(3, 150px);
    grid-template-rows: repeat(4, 100px);

    grid-template-areas: 
    "item1 item1 item2   "
    "item1 item1 item2   "
    "item3 item4 item5   " 
    "item6 item7 .    "
    ;

    /* . is used to indicate an empty cell */
    /* none, no grid areas defined */

    /*
    "header header header header"
    "main main . sidebar"
    "footer footer footer footer";
    */


}


.grid_container2 > div {
    border: 1px solid blue;
}



.box1-2 {
grid-area: item1;
}


.box2-2 {
    grid-area: item2;
}

.box3-2 {
    grid-area: item3;
}

.box4-2 {
    grid-area: item4;
}

.box5-2 {
    grid-area: item5;
}

.box6-2 {
}


.box7-2 {
}


/*part 3*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*


//example//
.container {
  grid-template:
    [row1-start] "header header header" 25px [row1-end]
    [row2-start] "footer footer footer" 25px [row2-end]
    / auto 50px auto;
}

Thatâ€™s equivalent to this:



.container {
  grid-template-rows: [row1-start] 25px [row1-end row2-start] 25px [row2-end];
  grid-template-columns: auto 50px auto;
  grid-template-areas: 
    "header header header" 
    "footer footer footer";
}
//////////



justify-items: start/end/center/stretch; (according to row align)
align-items: start/end/center/stretch/baseline; (according to column align)
place-items; center / center; (both justify/align-items using / or one word)



justify-content: start | end | center | stretch | space-around | space-between | space-evenly;    
(align the whole grid within its borders according to row )

align-content: start | end | center | stretch | space-around | space-between | space-evenly;    
(align the whole grid within its borders according to column )

place-content: center / center; (both justify/align-content using / or one word)




*/





.testDiv {
    height: auto;
    width: 90vw;
    border: 1px solid rgb(0, 10, 204);
    margin: 10px 0;
    padding: 10px;
  }