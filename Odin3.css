/*

inspect > element > computed (will show all properties)


*Index*
New
SVG
CSS Units
Colors
Fonts
Shadows
Borders
overflow using overflow, text-overflow, overflow-wrap, 
                word-break, white-space, hyphens
Pods elements
Valid style (ex)
Target selector style (ex)
figcaption (ex)
Positioning
Min/max
variables
preprocessors and precompiles
Form styling
custom checkbox (ex)
custom pen path (ex)
customSlider (ex)
input validation styling (ex)
animatedCheckBall (ex)
InternetIsHard Form (ex)


will learn:
speech
UI
pseudo class
abs/relative measurement
angles
time
frequency
speech, cue:
angles: deg, grad, rad, turn



need to know:
border-image*
overflow-style: marquee-line / marqueeblock
text-outline
text-align-last
white-space-collapse: preserve/collapse/pre-servebreaks/discard
white-space: normal/pre/nowrap/pre-wrap/pre-line;
text-emphasis: accent, dot,circle,dist, before,after
text-indent: length/%
text-justify: inter-word / interideograph / inter-cluster / distribute / kasinda / tibetan
text-wrap: unresrricted / suppress
animation > rotation: angle/rotation-point
colors > flavor/currentColor
Attrubute selector
General Sibiling
bookmark-label
image-resolution



in case you didn't know:
background-position: top center;
background-repeat: repeat-x;
background-attachement: scroll/fixed;
overflow-x: scroll/visible/hidden/no-display/no-content
font-size: xx-small; (n)ex //of elements font height 
text-align: justify;
word-break: keep-all/loose/break-strict/break-all
list-style-type/position/image
animation-play-state: running/paused
vm //smaller of the h or w


table> empty-cells: show/hide;
border-spacing: length, length
table-layout: fixed;
caption-side: top/bottom/left/right











*/

/*////////////////////////////////////////////////////////////////////*/
/*SVG*/

/* fills and replaces all circle svg tags with red
 Only the attributes x, y, width, height and href 
 on the use element will override those set on the referenced element.

 circle {
    fill: red;
}
*/

table, tr, th, td {
    border: 1px solid black;
  }


/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*

CSS Units
Absolute units, like px
cm, in preferably used in print setups

1cm = 37.8px = 25.2/64in
1in = 2.54cm = 96px




Relative units
em
1rem is the font-size of the root element (either :root or html).

ex: x-height of the element's font.
lh: Line height of the element. rlh(root)

vb, vi
svw/h, lvw/h, dvw/h

font-size percentage, will be percentage of parent's font size;
width percentage, will be percentage of parent's width;


Viewport Units
useful for full-screen app-like interfaces.

/* video: full-width * aspect-ratio
.full-width {
    width: 100vw;
    height: calc(100vw * (9/16));
  }




  

/* colors */
/*
<div class="wrapper">
  <div class="box">I am a box with opacity</div>    //trsp to back
</div> 


hsl(188, 97%, 28%)
Hue: The base shade of the color. This takes a value between 0 and 360, 
representing the angles around a color wheel.

Saturation: How saturated is the color? This takes a value from 0–100%, 
where 0 is no color (it will appear as a shade of grey), 
and 100% is full color saturation

Lightness: How light or bright is the color? 
This takes a value from 0–100%, where 0 is no light 
(it will appear completely black) and 100% is full light 
(it will appear completely white)


  background-position: right 40px;  //40px from top
  width: calc(30% + 100px);

  functions in CSS
  like rgb(), hsl(), url(), calc()



  
*/
  

/*////////////////////////////////////////////////////////////////////*/
/* fonts 



// font grows 1px for every 100px of viewport width
font-size: calc(16px + 1vw);
line-height: calc(1.2em + 1vw);

can also use complex calculations like
font-size: calc(16px + 6 * ((100vw - 320px) / 680));

3 Types of using external fonts
1) using link in style tag
2) using @import in css file
3) using @font-face to name a family and its src file


letter-spacing: -0.15em;
line-height: 
text-transform

//adding dots in end of overflowing text
.truncate {
  width: 250px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


*/
/*////////////////////////////////////////////////////////////////////*/
/* borders 



border: thick double #32a1ce;
border-style: dashed groove none dotted; // clockwise
ridge and groove
outset and inset
double

border-radius: 40% 20% 50% 40%; //blob shape
border-radius: 50% 40%;

border-radius: 10% / 50%;   //curved l/r shape (__)
border-radius: 10px 100px / 120px;  //vista shape


/* shadows


//box-shadow: x y blur spread;
inset: inwards above the bg but below the content
To specify multiple shadows, provide a comma-separated list of shadows.

*/



/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/* overflow

overflow-x, overflow: x y;

visible : not clipped
hidden/clip : clipped no scroll pards
scroll: scroll bar always visible
auto: will provide scrollbars if content overlows
overlay: like auto but the scroll bar is over the content to not take space

the container must have height or white-space: nowrap




/* text-overflow

text-overflow: //how text is displayed when it over flow
used with overlow:hidden or whitespace: nowrap

end of the line for the specified text direction
  direction: rtl;


text-overflow: left-end right-end;

clip //use "" empty string to avoid character clipping
ellipsis
fade() with a passed length/percentage
"string"



overflow-wrap: 
normal; a long word can overflow, break only at normal points like space
anywhere; any word can be broken, but soft breaking points are considered
break-word; any word can be broken, but soft breaking points not considered


word-break: own line
normal and break-word
keep-all
break-all


white-space: white space behavior
normal;
nowrap; suppresses line breaks
pre; white space collapsed and broken at <br>
pre-wrap; white space and only broken at <br> and necessary breaks to fill the boxes
pre-line; white space collapsed and broken at <br> and necessary breaks to fill the boxes
break-spaces;

how words should be hyphenated when text wraps across multiple lines.
hyphens -
none
manual
auto


*/



/*////////////////////////////////////////////////////////////////////*/
/*
opacity: 1
the back element is hidden

is the opposite to transparency:0
the back element is shown




*/


/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*

article h2 //descendant selector, can be nested in other elements
article > h2 //direct descendant, must be directly after article

h2 ~ p // all p's that "follow" h2  and share same parent of h2
h2 + p //"direct follow"

input:checked + label {}

div.row * // all elements that are children of div AND row



Pseudo-elements  (0, 0, 0, 1) specifity double ::
> child
+ adjacent sibiling
~ general sibiling

::marker    //for Li
input::file-selector=button
::placeholder   //input writing text


::first-letter, ::first-line
::selection //highlight


::before, ::after
content: "(" attr(href) ")";

::backdrop    //fullscreen background
::cue         //captions





/* Attribute Selectors (0,0,1,0) score 10 

[attribute]
selector[attribute] //just if an attribute exists
[attribute="value"][attribute="value"] //chain

attributes with .jpg for example
img[src$=".jpg"i] //looks from end for .jpg, case insenstive and s for case senstive
^= //match from start
$= //match from end
*= //match from start or end, at least one occurance

~= //white space separated text and has value
|= //value or value- en-US and begins with the stated value

  background: url(pdf.jpg) no-repeat left 50%;








/*Pseudo-classes one :

Pseudo-classes :hover
anchor element button

:picture-in-picture
:playing :paused

:autofill
:place-holder-shown

:read-only  //read only elements like submit, p etc.
<p contenteditable>This paragraph is editable; it is read-write.</p>

:default //for checkboxes, radio, select/option
:checked

:indeterminate    //  inputs[i].indeterminate = true; default unchecked radio/check
:blank
:valid / :invalid / :user-invalid

:in-range
:out-of-range
:required, input/select/textarea
:optional (default)


:dir(rtl)
:lang(en-US)

:target ////when a link=#p1 and p has id=p1
parent:target-within //Selects a parent when one of its descendants is a target
:scope

can access an id element by adding #id to page's url
or just the id in the href





:root //an element that is the root of the document. In HTML this is usually the <html> element.
:empty  //no children or text nodes

:nth-child(-n+3) //-0+3 //-1+3 etc **
// (odd) (7)//7th
:nth-last-child(n) //selects backwards
:first-child , :last-child, :only-child //to the element itself child:first-child
dd:nth-of-type(even) //selects among dd siblings not child this time
p:last-of-type
p:only-child
P:only-of-type // only child of its parent with the same element




:focus   //clicked or use tab
:focus-visible
parent:focus-within //when a child gets focus the parent gets style

:where() is like :is() 
the difference is that where = 0 specifity, is = most specific argument specificity
:is(:valid, :unsupported) //not support before after ok
:is(:valid, input) {    //is valid or input
:is(section, article, aside, nav) :is(section, article, aside, nav) h1
//aside section h1 is true

:not(.not-important) // font-weight: bold;
p:not(.class) //any "p" not class
:not(div)  // any element not div in the document

h1:has(+ h2) {  //an h1 with an h2 directly after it


selector:pseudo-class:pseudo-class:pseudo-class 


:link //unvisted
:visited //visited
:hover
:active //interaction like click
:focus //

:enabled  //default
:disabled //disabled attribute tied to it, has default css



*/

@layer inputValidation {
  .validation input:invalid + span::before {
    content: "✖";
    color: red;
  }
  .validation input:invalid {
    border: 2px solid red;
  }
  
  .validation input:valid + span::before {
    content: "✓";
    color: green;
  }
  .validation.input:valid {
    border: 2px solid green;
  }
  
}


@layer Target {
  /*target happens when the link associated with id is clicked*/
  #p1{
    filter: blur(4px);
  }
  
  #p1:target, #p2:target {
    background-color: grey;
    color: white;
    filter: blur(0px);
  
  }
  
  p:target::before {
    content: "►";
    margin-right: 0.25em;
  }
  


}

/*empty block, 2nd block will be after it
the first block has before 00 100% (overlay), after -1em (x-bt) */
@layer FigOverlay {
  /* Unopened lightbox */
.lightbox {
  display: none;
}

/* Opened lightbox */
.lightbox:target {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Close button */
.lightbox .close {
  position: relative;
  display: block;
}

.lightbox .close::after {
  right: -1rem;
  top: -1rem;
  width: 2rem;
  height: 2rem;
  position: absolute;
  display: flex;
  z-index: 1;
  align-items: center;
  justify-content: center;
  background-color: black;
  border-radius: 50%;
  color: white;
  content: "×";
  cursor: pointer;
}

/* Lightbox overlay */
.lightbox .close::before {
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  position: fixed;
  background-color: rgba(0, 0, 0, 0.7);
  content: "";
  cursor: default;
}

/* Lightbox content */
.lightbox figcaption {
  width: 25rem;
  position: relative;
  padding: 1.5em;
  background-color: lightpink;
}

}



.testDiv:focus-within {
  background-color: rgb(249, 249, 249);
}


/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/* 22/12

position: static;
//default

position:relative     
//access to top/bottom etc but disturbs, and overlaps its neighbors
//relative to its own position in dom

position:absolute     
//element not with document flow
//position free without disturbing elements around it
//relative to the document 
//or relative to its "relative/absolute" parent (useful to not specify that on a parent sometimes and use if for the html itself like a closing button or back to top)
//margins are added to the offset
//the element established a new block formatting context for its contents

>giving left/right without width will fill the available space
>can be used in a padded scroll parent

fixed
//positioned to the document "only"//
//except when one of its ancestors has a transform, perspective, or filter property set to something other than none or the will-change property is set to transform
scroll-margin-top: 5rem;  //for headers and hashtags overlap


sticky
//by default its relative//
//and fixed to its defined position//

//"sticks" to its nearest ancestor that has a "scrolling mechanism" 
//(created when overflow is hidden, scroll, auto, or overlay), 
//even if that ancestor isn't the nearest actually scrolling ancestor.

//relatively positioned until its containing block crosses a 
//specified threshold (such as setting top
//or the container it scrolls within
> sticky elements will pass to each other




will-change: scroll-position / contents / transform /opacity /left,top;

css property, element expected to change, 
utilized optimizations increase responsivness of page
use as last resort and toggle using script code for memory resources

el.addEventListener('mouseenter', hintBrowser);
  fn {   this.style.willChange = 'transform, opacity';
el.addEventListener('animationEnd', removeHint);
  fn {  this.style.willChange = 'auto';



 




*/


/* sticky pass to each other */
dl {
  margin-bottom: 500px;
}

dt {
  background: #b8c1c8;
  color: #fff;
  position: sticky;
  top: 0px;
}




/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/* functions

css does not allow us to create our own functions

calc();

min(x,y);
min(1rem, 50%, 10vw), the browser calculates which of these relative units is the smallest
background-size: min(600px, 100%);

width: min(80ch, 100vw - 2rem); //works

max(x,y,z..);
if y or z smaller than 100px, size will be 100px
will not exceed these at any given time

clamp()
  width: clamp(45ch, 50%, 75ch);
clamp to 45characters 
50% originally but this 50% wont exceed 75ch or be less than 45ch i.e 0.5emw/1emh
tan(),sin(),cos()

  font-size: max(16px, 1rem); //ios input zoom fix



*/


/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*

.modal {
  --color-name: red;
}

color: var(--color-name, optionalFallbackValue);
//optional : incase invalid or not declared
//value or var

color: var(--main-bg-color, var(--root-bg-color, white));


scope: selector and its descendants

:root selector is same as html but has higher specificity
scope is now for all html descendants


//will be selected depending on which class is currently present on the root element
// var theme toggle ex in .js file
:root.dark {
    --var1
}

:root.solid {
    --var1

}

//browser theme 
@media (prefers-color-scheme: dark) {
  //when the user has their browser theme dark, website use this query
  //dark or light only
  //does not allow user to change it
  :root {
    --color
  }


p {
  color: blue;  //lower specificity but will be used due to 16px invalidity
                //but in vars, the default will be used(i.e black), no blue
}

p {
  color: 16px;
}


*/



/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/* Browser compatibility

progressive web apps that allow applications to fully function 
within a browser

rendering engines to display information on the web page
responsible for displaying requested content (html, css, type viewer)
Chrome utilize Blink
Safari uses WebKit

must make sure that you’re testing your web applications 
against the browsers which are most likely to be used by the users

make sure its mobile compatible due to the huge share of mobiles
in Android and iOS

iOS iPadOS chrome still use WebKit


.rendering
.networking requests
.javascript interpreter
.Data storage, local or SQL mechanisms

connecting DOM nodes and visual information to create the render tree

 
*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/* Frameworks and Preprocessors

Frameworks
bundle of css can use and access
like bootstrap, bulma, foundation
Tailwind CSS, Materialize

save time instead of starting from a blank document
collection of stylesheets ready to use
for in common situations
in teams they standardize layouts/names for a smoother development cycle, communication

it is recommended to learn the language first then use the framework to enhance speed
because of the already provided documentation
so one can debug and tweak the css better in the long run
once you learn it, will find similarities across many websites
and as its difficult to override, 
will cause less uniqueness and creativity to the website and skills practiced

useful for creating the common across websites
and save time for the actual concept to be developed

develop own css code guidelines, documented pattern library or style guide














Preprocessors aka precompilers
allow write loops, join multiple stylesheets and nest classes
decreases the amount of CSS needed to write a project useful in large projects
don't repeat yourself
extensions to vanilla css
functionality like nesting, mixins, variables, operators, interpolations, functions
like SASS, LESS, Styles
learn them if there is a feature you need

helps us to use complex logical syntax like
variables, functions, mixins, code nesting, and inheritance to name a few, 
supercharging your vanilla CSS

automate menial tasks, build reusable code snippets, avoid code repetition
write nested code blocks that are well organized and easy to read

pre syntax compiled into native css syntax to be interpreted by the browsers

cons, 
not allow you to have absolute direct control over css
code wont be deployment ready at all times due to the compilation step except if live preprocessors are used

Preprocessors have a compilation step, meaning that CSS line numbers 
are irrelevant when trying to debug our code. But debugging is twice 
as hard as programming
compilation takes time
large css files

we can mimick variables and mixins by using comma-delimited css selectors in css
selector, another selector {
  common rules
}






SASS,
written in Ruby language, 
is a style sheet language
LibSass allows it to be parsed in other languages
written using sass or scss syntaxes
used by bootstrap, zapier, uber, airbnb and kickstarter

scss, 
not based on indentation
has curly braces and semicolons
easier to read


LESS,
written in js
strongest competitor to sass
cons, does not support functions and uses @ to declare variables
pros, easier to add to projects using NPM or less.js file
used by Indiegogo, Patreon, WeChat


Stylus,
written with node.js
armed with extremely powerful built-in functions and is capable of handling heavy computing
supports native CSS
allows brackets colons and smicolons
uses assignment operators to indicate a variable declaration
used by Accenture, HackerEarth, Coursera. and frameworks like Bais and Kouto Swiss


preprocessor compilers
compile into css using 3rd party compilers or code editor extensions
like 
,Live Sass
compiles in real-tome, enables live browers to reload and display changes automatically
so allows not lear code editor window


,Prepros
can compile the 3 major css pre processors
live browser reload, free
offers better cross browser compatibility, making sure website is rendered in a consistent manner across different browsers
with LambdaTest, can perform cross browser testing on 3000 real browsers running over real operating systems on-cloud
multi os support

,CodeKit
mac support
packed with image optimizer, minified, Cache buster, 
built-in NPM and several CSS frameworks along with debugging tools.

also Pleeease, CSS-crush, myth, Garden, Rework




*/


/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*
checkbox

accent-color: red;
color applied to checkbox, radio, range, progress tag


*/


form div, form fieldset {
  display: block;
  margin: 5px;
}

form div #onions {


}


@layer customCheckbox {

/*  the box does not scale along with the font-size so we create a custom one*/

.form-control {
  width: 100%;
  padding: 10px;

  font-family: system-ui, sans-serif;
  font-size: 1rem;
  font-weight: bold;
  line-height: 1.1;

  /* change the size of the check box*/
  display: grid;
  grid-template-columns: 1.2em auto;
  gap: 0.5em;

  /*puts the content in center*//*
  place-content: center;  
  */

}

/*to remove the check box */
input[type="checkbox"] {
  -webkit-appearance: none;

}


/* custom appearance */
input[type="checkbox"] {

  background-color: #fff;

  font: inherit;
  color: currentColor;
  width: 1.15em;
  height: 1.15em;
  border: 0.15em solid currentColor;
  border-radius: 0.2em;

  transform: translateY(-0.075em);
  position: relative;

  /* Adjusts the position of the checkboxes on the text baseline
  vertical-align: -2px;
  */

}

/*for making an inside click box */
input[type="checkbox"]::before {
  content: "";
  position: absolute;
  width: 0.65em;
  height: 0.65em;
  top: 49%;
  left: 49%;
  transform: scale(0) translate(-50%,-50%); /*or visibility*/
  transition: 120ms transform ease-in-out;
  box-shadow: inset 1em 1em red;
  /*Use of box-shadow instead of background-color will enable the state of the radio to be visible when printed*/
}

input[type="checkbox"]:checked::before {
  transform: scale(1) translate(-50%,-50%);
}

/* outer border on focus */
input[type="checkbox"]:focus {
  outline: max(2px, 0.15em) solid currentColor;
  outline-offset: max(2px, 0.15em);
}

/*
https://moderncss.dev/pure-css-custom-styled-radio-buttons/
*/


}



/* adding a custom pen path from a clip path maker*/
.writing {
  height: 20px;
  width: 20px;
  background-color: red;
  
  transform-origin: bottom left;
  clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);

  cursor: not-allowed;
}




@layer form2 {

  .form2 form {
    /* Center the form on the page */
    margin: 0 auto;
    width: 400px;
    /* Form outline */
    padding: 1em;
    border: 1px solid #ccc;
    border-radius: 1em;
  }
  
  .form2 ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .form2 form li + li {
    margin-top: 1em;
  }
  
  .form2 label {
    /* Uniform size & alignment */
    display: inline-block;
    width: 90px;
    text-align: right;
  }
  
  .form2 input,
  textarea {
    /* To make sure that all text fields have the same font settings
       By default, textareas have a monospace font */
    font: 1em sans-serif;
  
    /* Uniform text field size */
    width: 300px;
    box-sizing: border-box;
  
    /* Match form field borders */
    border: 1px solid #999;
  }
  
  .form2 input:focus,
  textarea:focus {
    /* Additional highlight for focused elements */
    border-color: #000;
  }
  
  .form2 textarea {
    /* Align multiline text fields with their labels */
    vertical-align: top;
  
    /* Provide space to type some text */
    height: 5em;
  }
  
  .form2 .button {
    /* Align buttons with the text fields */
    padding-left: 90px; /* same size as the label elements */
  }
  
  .form2 button {
    /* This extra margin represent roughly the same space as the space
       between the labels and their text fields */
    margin-left: 0.5em;
  }
  

}



datalist {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  writing-mode: vertical-lr;
  width: 200px;

}

/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/* Form CSS

/* form elements have default css, so make it inherit from its parent 
input type submit does not 
radio/checkboxes width center them only to this width */
button,
input,
select,
textarea {
  font-family: inherit;
  font-size: 100%;
}


/*
form {
  background: url("");
}

fieldset {
  position: relative;
}

legend {
  position: absolute;
  bottom: 0;
  right: 0;
}
*/


/*
appearance:none; property when used in safari
stops any control applied from using system-level styling as much as possible
starting with the borders

also setting background/border allows setting height, font-size
**could add style without these points in chrome, useful in safari**

to remove the x from search buttons if still visible
input[type="search"]:not(:focus, :active)::-webkit-search-cancel-button { display: none; }


//on check boxes
vertical-align: -2px;

//select/option custom dropdown, place in a wrapping div:after to put custom content icon

//file,  hide with css properties, use css on the label tag

//can style drop down selection using tutorial

*/

input[type="search"] {
  height: 50px;
  border: 1px solid red;
  border-radius:  15px;
  font-size: 20px;

}


@layer customSlider {

  /* clearing the slider */
  input[type=range] {
    -webkit-appearance: none; /* Hides the slider so that custom slider can be made */
    width: 100%; /* Specific width is required for Firefox. */
    background: transparent; /* Otherwise white in Chrome */
  }
  
  input[type=range]::-webkit-slider-thumb {
    -webkit-appearance: none;
  }
  
  input[type=range]:focus {
    outline: none; /* Removes the blue border. You should probably do some kind of focus styling for accessibility reasons though. */
  }
  
  input[type=range]::-ms-track {
    width: 100%;
    cursor: pointer;
  
    /* Hides the slider so custom styles can be added */
    background: transparent; 
    border-color: transparent;
    color: transparent;
  }

  /*adding a special slider thumb */
  /* Special styling for WebKit/Blink */
  input[type=range]::-webkit-slider-thumb {
    -webkit-appearance: none;
    border: 1px solid #000000;
    height: 36px;
    width: 16px;
    border-radius: 3px;
    background: #ffffff;
    cursor: pointer;
    margin-top: -14px; /* You need to specify a margin in Chrome, but in Firefox and IE it is automatic */
    box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d; /* Add cool effects to your sliders! */
  }

  /* the background */
  input[type=range]::-webkit-slider-runnable-track {
  /*input[type=range]::-moz-range-track {
    input[type=range]::-ms-track {
    input[type=range]::-ms-fill-lower {
    input[type=range]:focus::-ms-fill-lower {
    input[type=range]::-ms-fill-upper {
    input[type=range]:focus::-ms-fill-upper {   */
    width: 100%;
    height: 8.4px;
    cursor: pointer;
    box-shadow: 1px 1px 1px #000000, 0px 0px 1px #0d0d0d;
    background: #3071a9;
    border-radius: 1.3px;
    border: 0.2px solid #010101;
  }

  input[type=range]:focus::-webkit-slider-runnable-track {
    background: #ffe27b;
  }

  /* generator: also can use http://danielstern.ca/range.css/?ref=css-tricks#/ 
  examples: https://codepen.io/collection/DgYaMj/?cursor=eyJjb2xsZWN0aW9uX2lkIjoiRGdZYU1qIiwiY29sbGVjdGlvbl90b2tlbiI6bnVsbCwibGltaXQiOjQsIm1heF9pdGVtcyI6OTksIm9mZnNldCI6MjQsInBhZ2UiOjcsInNvcnRfYnkiOiJwb3NpdGlvbiIsInNvcnRfb3JkZXIiOiJBc2MifQ== 
  */

}


/*////////////////////////////////////////////////////////////////////*/
/* 29/12

::before and ::after
not visible to screen readers, not added to the DOM

@layer inputValidationStyling {
  /*
<div>
  <label for="fname">First name: </label>
  <input id="fname" name="fname" type="text" required />
  <span></span>
</div>
*//*

//label and input sit on different lines because 100% width
//but span will be on same line of input because it has flow 0
fieldset > div {
  margin-bottom: 20px;
  display: flex;
  flex-flow: row wrap; //100% width different lines, 0% same line
}

input + span {
  position: relative;
}

//adding a label-box above the input
input:required + span::after {
  font-size: 0.7rem;
  position: absolute;
  content: "required";
  color: white;
  background-color: black;
  padding: 5px 10px;
  top: -26px;
  left: -70px;
}

input:valid + span::before {
  position: absolute;
  right: -20px;
  top: 5px;
  content: "✓";
  color: green;
}

input:out-of-range + span::after {
  color: white;
  background-color: red;
  width: 155px;
  content: "Outside allowable value range";
  left: -182px;
}

}

//:valid :invalid
inputs with "required" no content > :invalid/:requried
or no matching content like email/url types
out of min/max > :invalid/:out-of-range :in-range
//spinners just go to the valid range directly

:read-only
:read-write

:default //radios/checkboxes checked by default i.e attr checked
:indeterminate //radios/checkboxesjsindeterminate/progress.novalue neither checked/unchecked
:checked

:focus-visible //when tab-key not mouse or touch
:placeholder-shown

:user-invalid //only when the element loses focus and its invalid


@layer animatedCheckBall {

input[type="radio"]::before {
  display: block;
  content: " ";
  width: 10px;
  height: 10px;
  border-radius: 6px;
  background-color: red;
  font-size: 1.2em;
  transform: translate(3px, 3px) scale(0);
  transform-origin: center;
  transition: all 0.3s ease-in;
}

input[type="radio"]:checked::before {
  transform: translate(3px, 3px) scale(1);
  transition: all 0.3s cubic-bezier(0.25, 0.25, 0.56, 2);
}

}
/*The advantage of using a transform rather than transitioning width/height is that you can use transform-origin to make it grow from the center of the circle, rather than having it appear to grow from the circle's corner.*/

/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*



*/

@layer FormIIH {

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}


.formIIH {

  color: #5D6063;
  background-color: #EAEDF0;
  font-family: "Helvetica", "Arial", sans-serif;
  font-size: 16px;
  line-height: 1.3;

  display: flex;
  flex-direction: column;
  align-items: center;

}

.speaker-form-header {
  text-align: center;
  background-color: #F6F7F8;
  border: 1px solid #D6D9DC;
  border-radius: 3px;
  
  width: 80%;
  margin: 40px 0;
  padding: 50px;
}

.speaker-form-header h1 {
  font-size: 30px;
  margin-bottom: 20px;
}

.speaker-form {
  background-color: #F6F7F8;
  border: 1px solid #D6D9DC;
  border-radius: 3px;
  
  width: 80%;
  margin: 0 0 40px 0;
  padding: 50px;
}

.form-row {
  margin-bottom: 40px;
  display: flex;
  justify-content: flex-start;
  flex-direction: column;
  flex-wrap: wrap;
}

.form-row input[type='text'], .form-row input[type='email'], .form-row select, .form-row textarea {
  background-color: #FFFFFF;
  border: 1px solid #D6D9DC;
  border-radius: 3px;
  width: 100%;
  padding: 7px;
  font-size: 14px;
}

.form-row label {
  margin-bottom: 15px;
}

.form-row input[type='text']:invalid,
.form-row input[type='email']:invalid {
  border: 1px solid #D55C5F;
  color: #D55C5F;
  box-shadow: none; /* Remove default red glow in Firefox */
}


/* radio buttons */
.legacy-form-row {
  border: none;
  margin-bottom: 40px;
}

.legacy-form-row legend {
  margin-bottom: 15px;
}

.legacy-form-row .radio-label {
  display: block;
  font-size: 14px;
  padding: 0 20px 0 10px;
}

.legacy-form-row input[type='radio'] {
  margin-top: 2px;
}
  
.legacy-form-row .radio-label,
.legacy-form-row input[type='radio'] {
  float: left;
}

/* select */
.form-row select {
  width: 100%;
  padding: 5px;
  font-size: 14px;            /* This won't work in Chrome or Safari */
  -webkit-appearance: none;   /* This will make it work */

}


/* text area */
.form-row textarea {
  font-family: "Helvetica", "Arial", sans-serif;
  font-size: 14px;

  border: 1px solid #D6D9DC;
  border-radius: 3px;

  min-height: 200px;
  margin-bottom: 10px;
  padding: 7px;
  resize: none;
}

.form-row .instructions {
  color: #999999;
  font-size: 14px;
  margin-bottom: 30px;
}

/*checkbox*/
.form-row .checkbox-label {
  margin-bottom: 0;
}

/*submit button*/
.form-row button {
  font-size: 16px;
  font-weight: bold;

  color: #FFFFFF;
  background-color: #5995DA;

  border: none;
  border-radius: 3px;

  padding: 10px 40px;
  cursor: pointer;
}

.form-row button:hover {
  background-color: #76AEED;
}

.form-row button:active {
  background-color: #407FC7;
}



/*desktop*/
@media only screen and (min-width: 700px) {
  .speaker-form-header,
  .speaker-form {
    width: 600px;
  }
  .form-row {
    flex-direction: row;
    align-items: flex-start; /* To avoid stretching */
    margin-bottom: 20px;
  }
  .form-row input[type='text'], .form-row input[type='email'],, .form-row select, .form-row textarea {
    width: 250px;
    height: initial;
  }
  .form-row label {
    text-align: right;
    width: 120px;
    margin-top: 7px;
    padding-right: 20px;
  }

  /* radio buttons */

  .legacy-form-row {
    margin-bottom: 10px;
  }
  .legacy-form-row legend {
    width: 120px;
    text-align: right;
    padding-right: 20px;
  }
  .legacy-form-row legend {
    float: left;
  }

  /*text area*/
  .form-row .instructions {
    margin-left: 120px;
  }

  /*checkbox*/
  .form-row .checkbox-label {
    margin-left: 120px;
    width: auto;
  }

  /*submit button*/
  .form-row button {
    margin-left: 120px;
  }



}




}





.testDiv {
  height: auto;
  width: 90vw;
  border: 1px solid rgb(0, 10, 204);
  margin: 10px 0;
  padding: 10px;
}