/*
*Index*
New
SVG
CSS Units
Colors
Fonts
Shadows
Borders
overflow using overflow, text-overflow, overflow-wrap, 
                word-break, white-space, hyphens




will learn:
speech
UI
pseudo class
abs/relative measurement
angles
time
frequency
speech, cue:
angles: deg, grad, rad, turn



need to know:
border-image*
overflow-style: marquee-line / marqueeblock
text-outline
text-align-last
white-space-collapse: preserve/collapse/pre-servebreaks/discard
white-space: normal/pre/nowrap/pre-wrap/pre-line;
text-emphasis: accent, dot,circle,dist, before,after
text-indent: length/%
text-justify: inter-word / interideograph / inter-cluster / distribute / kasinda / tibetan
text-wrap: unresrricted / suppress
animation > rotation: angle/rotation-point
colors > flavor/currentColor
Attrubute selector
General Sibiling
bookmark-label
image-resolution



in case you didn't know:
background-position: top center;
background-repeat: repeat-x;
background-attachement: scroll/fixed;
overflow-x: scroll/visible/hidden/no-display/no-content
font-size: xx-small; (n)ex //of elements font height 
text-align: justify;
word-break: keep-all/loose/break-strict/break-all
list-style-type/position/image
animation-play-state: running/paused
vm //smaller of the h or w


table> empty-cells: show/hide;
border-spacing: length, length
table-layout: fixed;
caption-side: top/bottom/left/right











*/

/*////////////////////////////////////////////////////////////////////*/
/*SVG*/

/* fills and replaces all circle svg tags with red
 Only the attributes x, y, width, height and href 
 on the use element will override those set on the referenced element.

 circle {
    fill: red;
}
*/

table, tr, th, td {
    border: 1px solid black;
  }


/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*

CSS Units
Absolute units, like px
cm, in preferably used in print setups

1cm = 37.8px = 25.2/64in
1in = 2.54cm = 96px




Relative units
em
1rem is the font-size of the root element (either :root or html).

ex: x-height of the element's font.
lh: Line height of the element. rlh(root)

vb, vi
svw/h, lvw/h, dvw/h

font-size percentage, will be percentage of parent's font size;
width percentage, will be percentage of parent's width;


Viewport Units
useful for full-screen app-like interfaces.

/* video: full-width * aspect-ratio
.full-width {
    width: 100vw;
    height: calc(100vw * (9/16));
  }




  

/* colors */
/*
<div class="wrapper">
  <div class="box">I am a box with opacity</div>    //trsp to back
</div> 


hsl(188, 97%, 28%)
Hue: The base shade of the color. This takes a value between 0 and 360, 
representing the angles around a color wheel.

Saturation: How saturated is the color? This takes a value from 0–100%, 
where 0 is no color (it will appear as a shade of grey), 
and 100% is full color saturation

Lightness: How light or bright is the color? 
This takes a value from 0–100%, where 0 is no light 
(it will appear completely black) and 100% is full light 
(it will appear completely white)


  background-position: right 40px;  //40px from top
  width: calc(30% + 100px);

  functions in CSS
  like rgb(), hsl(), url(), calc()



  
*/
  

/*////////////////////////////////////////////////////////////////////*/
/* fonts 



// font grows 1px for every 100px of viewport width
font-size: calc(16px + 1vw);
line-height: calc(1.2em + 1vw);

can also use complex calculations like
font-size: calc(16px + 6 * ((100vw - 320px) / 680));

3 Types of using external fonts
1) using link in style tag
2) using @import in css file
3) using @font-face to name a family and its src file


letter-spacing: -0.15em;
line-height: 
text-transform

//adding dots in end of overflowing text
.truncate {
  width: 250px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}


*/
/*////////////////////////////////////////////////////////////////////*/
/* borders 



border: thick double #32a1ce;
border-style: dashed groove none dotted; // clockwise
ridge and groove
outset and inset
double

border-radius: 40% 20% 50% 40%; //blob shape
border-radius: 50% 40%;

border-radius: 10% / 50%;   //curved l/r shape (__)
border-radius: 10px 100px / 120px;  //vista shape


/* shadows


//box-shadow: x y blur spread;
inset: inwards above the bg but below the content
To specify multiple shadows, provide a comma-separated list of shadows.

*/



/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/* overflow

overflow-x, overflow: x y;

visible : not clipped
hidden/clip : clipped no scroll pards
scroll: scroll bar always visible
auto: will provide scrollbars if content overlows
overlay: like auto but the scroll bar is over the content to not take space

the container must have height or white-space: nowrap




/* text-overflow

text-overflow: //how text is displayed when it over flow
used with overlow:hidden or whitespace: nowrap

end of the line for the specified text direction
  direction: rtl;


text-overflow: left-end right-end;

clip //use "" empty string to avoid character clipping
ellipsis
fade() with a passed length/percentage
"string"



overflow-wrap: 
normal; a long word can overflow, break only at normal points like space
anywhere; any word can be broken, but soft breaking points are considered
break-word; any word can be broken, but soft breaking points not considered


word-break: own line
normal and break-word
keep-all
break-all


white-space: white space behavior
normal;
nowrap; suppresses line breaks
pre; white space collapsed and broken at <br>
pre-wrap; white space and only broken at <br> and necessary breaks to fill the boxes
pre-line; white space collapsed and broken at <br> and necessary breaks to fill the boxes
break-spaces;

how words should be hyphenated when text wraps across multiple lines.
hyphens -
none
manual
auto


*/



/*////////////////////////////////////////////////////////////////////*/
/*
opacity: 1
the back element is hidden

is the opposite to transparency:0
the back element is shown




*/


/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*////////////////////////////////////////////////////////////////////*/
/*

article h2 //descendant selector, can be nested in other elements
article > h2 //direct descendant, must be directly after article

h2 ~ p // a p that "follow" h2  and share same parent of h2
h2 + p //"direct follow"

input:checked + label {}

div.row * // all elements that are children of row



Pseudo-elements  (0, 0, 0, 1) specifity double ::
> child
+ adjacent sibiling
~ general sibiling

::marker    //for Li
input::file-selector=button
::placeholder   //input writing text


::first-letter, ::first-line
::selection //highlight


::before, ::after
content: "(" attr(href) ")";

::backdrop    //fullscreen background
::cue         //captions





/* Attribute Selectors (0,0,1,0) score 10 

[attribute]
selector[attribute] //just if an attribute exists
[attribute="value"]

attributes with .jpg for example
img[src$=".jpg"i] //looks from end for .jpg, case insenstive and s for case senstive
^= //match from start
$= //match from end
*= //match from start or end, at least one occurance

~= //white space separated text and has value
|= //value or value- en-US and begins with the stated value









/*Pseudo-classes one :

Pseudo-classes :hover
anchor element button

:picture-in-picture
:playing :paused

:autofill
:place-holder-shown

:read-only  //read only elements like submit, p etc.
<p contenteditable>This paragraph is editable; it is read-write.</p>

:default //for checkboxes, radio, select/option
:checked

:indeterminate    //  inputs[i].indeterminate = true; default unchecked radio/check
:blank
:valid / :invalid / :user-invalid

:in-range
:out-of-range
:required


:dir(rtl)
:lang(en-US)

:target ////when a link=#p1 and p has id=p1
parent:target-within //Selects a parent when one of its descendants is a target
:scope

can access an id element by adding #id to page's url
or just the id in the href





:root //an element that is the root of the document. In HTML this is usually the <html> element.
:empty  //no children or text nodes

:nth-child(-n+3) //-0+3 //-1+3 etc **
// (odd) (7)//7th
:nth-last-child(n) //selects backwards
:first-child , :last-child, :only-child
dd:nth-of-type(even) //selects among dd siblings not child this time

:focus   //clicked or use tab
:focus-visible
parent:focus-within //when a child gets focus the parent gets style

:where() is like :is() 
the difference is that where = 0 specifity, is = most specific argument specificity
:is(:valid, :unsupported) //not support before after ok
:is(:valid, input) {    //is valid or input
:is(section, article, aside, nav) :is(section, article, aside, nav) h1
//aside section h1 is true

:not(.not-important) // font-weight: bold;
p:not(.class) //any "p" not class
:not(div)  // any element not div in the document

h1:has(+ h2) {  //an h1 with an h2 directly after it


selector:pseudo-class:pseudo-class:pseudo-class 


:link //unvisted
:visited //visited
:hover
:active //interaction like click
:focus //

:enabled  //default
:disabled //disabled attribute tied to it, has default css



*/

@layer inputValidation {
  input:invalid + span::before {
    content: "✖";
    color: red;
  }
  input:invalid {
    border: 2px solid red;
  }
  
  input:valid + span::before {
    content: "✓";
    color: green;
  }
  input:valid {
    border: 2px solid green;
  }
  
}


@layer Target {
  /*target happens when the link associated with id is clicked*/
  #p1{
    filter: blur(4px);
  }
  
  #p1:target, #p2:target {
    background-color: grey;
    color: white;
    filter: blur(0px);
  
  }
  
  p:target::before {
    content: "►";
    margin-right: 0.25em;
  }
  


}


@layer FigOverlay {
  /* Unopened lightbox */
.lightbox {
  display: none;
}

/* Opened lightbox */
.lightbox:target {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Lightbox content */
.lightbox figcaption {
  width: 25rem;
  position: relative;
  padding: 1.5em;
  background-color: lightpink;
}

/* Close button */
.lightbox .close {
  position: relative;
  display: block;
}

.lightbox .close::after {
  right: -1rem;
  top: -1rem;
  width: 2rem;
  height: 2rem;
  position: absolute;
  display: flex;
  z-index: 1;
  align-items: center;
  justify-content: center;
  background-color: black;
  border-radius: 50%;
  color: white;
  content: "×";
  cursor: pointer;
}

/* Lightbox overlay */
.lightbox .close::before {
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  position: fixed;
  background-color: rgba(0, 0, 0, 0.7);
  content: "";
  cursor: default;
}

}



.testDiv:focus-within {
  background-color: rgb(249, 249, 249);
}










.testDiv {
  height: auto;
  width: 90vw;
  border: 1px solid rgb(0, 10, 204);
  margin: 10px 0;
  padding: 10px;
}