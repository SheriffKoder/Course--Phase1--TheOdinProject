/*
* (universal selector)
Div (all type selector)
.Class (all class selector)

#Id unlike classes
should use IDs sparingly, 
an element can only have one id
cannot be repeated on a single page


hyphen _


.read, .unread {
    //group selector, common declarations between the two elements
}

.read.subread {
.read#preview {
        //chain selector > an element that is 'read' and 'subread' in the same time
        //any selector, name with type but not chain types together
}


. ancestor .child {
        //descendant selector, when element is a child and in this ancestor
}

.card:hover .card_text {    /* when hover on card this is applied to text

}

a[href^="http"] {       /* attribute selector
        //more in base3.css
}

/*

color: transparent;

quotes on the family name, no quotes on the generic names
"Times New Roman" sans-serif

setting height and width for an image (even if not needed)
will cause the image to have a space reserved until it loads 
and not cause float loading problems

/*-----------------------------------------------------------------------------*/
/*

CSS Cascade (Priority) for the same style-property only, else is applied
1.HTML inline                                           score 1000
1.1 html header style
2.Layer                                                 score 
3.Direct specificity/Last specified
4.ID                                                   score 100
5.Class/attribute(required, href=.. )/pseudo-selectors(::hover etc) score 10
6.Type                                                  score 1
* + > ~ _ || have no impact over specificity score      score 0

.para:first-of-type << highest hit 4 4 (wins) -> color:white
p.para << hit 4 5  -> color:red

#para -> color:red (now color:red has been enhanced by a hit so wins with this)


if same type, then the more count the more priority
.class .class wins over .class
#id .class wins over .class .class
#id .class .class wins over #id .class


Website style over browser style


@layers one, two; /* defining our layers */

/*

@layer one {
    h1 {

    }
}

@layer two {
    h1 {

    }

}

/* Adding fonts  */
/*
@font-face {
    font-family : fontname; 1
    src: url (  ); 2 
}

html link 
css font-family: 'fontname';

css @import url('');
css font-family: 'fontname';



/*-----------------------------------------------------------------------------*/
/* to open the ruler */
/*
Inspect in Chrome
Press Control+Shift+P or Command+Shift+P (Mac) to open the Command menu, 
type Show rulers on hover, and press Enter.

Command+F in elements to find
Edit HTML , CMD+Enter to finish
Right click force state hover etc,
Drag element
H > hide, delete > delete

Inspect > three dots on top-right > More tools > CSS overview


/*-----------------------------------------------------------------------------*/
/*
Everything in CSS is a box
with two types of boxes, inline or block

Which ever margin between two boxes is the largest, it is the one will be used

Padding and border adds to the total space
else use box-sizing: border:box;
to use only the given space over the content
called alternative CSS box model



Block:
new line, 
height/width are respected, 
padding/margin/border cause elements to be pushed away, 
box extend in the inline direction to fill space available in its container

inLine: (no HW,Vertical overlap)
same line
no height and width respected
vertical properties(padding,border) not push the opposite content overlap

inner display type
display: flex, affects the inner elements
display: inner-flex

display: inline-block

inline-size/block-size
If the writing mode is vertically oriented, 
the value of inline-size relates to the height of the element
inline-size: 150px;
writing-mode: vertical-rl;

/*-----------------------------------------------------------------------------*/
/*
margin
child in relation to the containing element
if two opposites are in negative, the container is shrink by allowing their value
but container's min height does not shrink,

>Two positive margins will combine to become one margin. 
Its size will be equal to the largest individual margin.
called Collapsing margins, is only relevant in the vertical direction.


>Two negative margins will collapse and the smallest 
(furthest from zero) value will be used.
(the direction between this element and the element on the other side is shortened, 
so you can find the other element traveling to the other side margrin)

>If one margin is negative, its value will be subtracted from the total.


border-style
cannot have a negative padding, will be 0

Margin: 0 auto;
element will take the width specified, then the remaining space
> split evenly between the two margins,
horizontally center that element within its container

Max-width instead of width for a block, 
improve handling small windows by allowing shrinking




/*-----------------------------------------------------------------------------*/
/*


Flexbox is used to line up a bunch of boxes

Divs and spans give no particular meaning to their content
Generic boxes that can contain anything
parent elements to correctly position other elements

Span, inline, group inline elements for styling, wrap with its content

using the normal/default flow of elements, ensures that your content is readable even if the user's using a very limited browser or a device such as a screen reader that reads out the content of the page. 

By default, block-level elements are laid out in the block flow direction, which is based on the parent's writing mode (initial: horizontal-tb).
so in a writing-mode: vertical-lr; divs will align beside each other



/* hide, not take space
Display:none; element like <script> uses it as default, 
common with KS to hide/show elements without really deleting and recreating them

/* hide, take space
visibility:none;


/*-----------------------------------------------------------------------------*/
/*

float: left;
overflow: auto; (allows parent to contain the float, a fix)

position: static; not positioned in any specific way
position: relative; allows add top/left etc to adjust its normal position, if not specified same as static
position: absolute; to its nearest 'positioned i.e relative' ancestor
position: fixed; top/left relative to 'viewport', same place even if scrolled, top/left of view port window
position: sticky;         /* stays in its place and move on scroll in the container only  */

/*Layout
make container relative
sections static but with margin-left according to navigation width px or %((not fixed nav) (will be 2/3 right)
navigation (will be 1/3 left)
    absolute(to relative parent)
    or float:left
/* and will be responsive because the divs do not have width's and take available


/* make divs beside each other and wrap
display: inline-block; 
or
float: left; (after box clear:left;)

/*layout2
.nav {
    display: inline-block;
    vertical-align: top;
    width: 25%
}
.remaining_of_the_container_container {
    display: inline-block;
    vertical-align: top;
    width: 25%

}

/*Layout 3
.container {
    display: flex;
}
.nav {
    width: 200px;
}
.flex-column {
    flex: 1;
}


/*layout3
flex: initial (start position)
flex: none ( )
flex: 1 (take 
flex: 2 to set order



/*Fixing layout on screen size change
@media (min-width:600px) {  /*if more than 600px
    .class {}
}

@media (max-width:599px) { /*if less than 599px
    .class {display: inline;}
}










*/

/*
.testdiv_date.main {

    height: 200px;
    width: 500px;
    background-color: lightblue;

    display: flex;
    justify-content: center;
    align-items: center;
}

.testdiv_date.sub {

    height: 100px;
    width: 100px;
    background-color: red;
}

*/


@counter-style x { symbol: }
list-style: x;
list-style-type: none;
background:

.button_blue {

    color: white;
    background-color: blue;

}


.thumb_list {
    list-style-type: "\1F44D"; /*thumb icon as the list marker */
}


/* a way of adding an image to the list item 
and by padding make it seem like a marker */
.image_li_marker {
    margin-left: -12px;
    padding-left: 12px;

    list-style-type: none;
    background: url('images/arrow.png') 0 50% no-repeat;

}

.inside_li_marker {

    list-style-position: inside;     /*placed with the text itself */
    list-style: circle inside;

}

/* horizontal list */
li {
    /*
    display: inline-block; /* items on same line and markers removed */
    
    float: left;
    margin-left: 30px;
    /* items on same line and markers kept */

}

/*div containing 2 elements one of them get overflow because of flow property
clearfix */
.div_clearfix::after {
    content: "";
    clear: both;
    display: table;
  }
  
  .div_clearfix2 {
    overflow: auto;
  }
  
  
/* lets define a counter/marker style that is not in the predefined set of styles */ 
/* more reading on application */
@counter-style thumbsUp {
    system : cyclic; /* cyclic, numeric, alphabetic, symbolic, additive, or fixed. */
    symbols: "\1F44D"; /* strings, images, or custom identifiers, can have multi symbols and will be placed in order */
    suffix: " "; /*content space,),img ... that will be appended to the marker representation. also there is prefix*/
    /*fallback: range: start end(infinite); speak-as */
}
/*https://www.w3.org/TR/predefined-counter-styles/, https://r12a.github.io/app-counters/*/

li {
    list-style: thumbsUp;
}

p {
    font-size: 50px;
}

/*/////////////////////////////////////////////////////*/


.Para:first-of-type {
    color: orange;
    } 
p#Para {
    color: red;   
}

#Para {
    color: red;   
}



.Test_Container {
    height: 100px;
    width: 100px;
    background: red;
    display: block;
    

}

.Margin1 {
    margin-bottom: 100px;
}

.Margin2 {
    margin-top: -20px;
}

.Test_Inline {
    background: blue;
    height: 100px;
    width: 100px;
    padding-left: 100px;
    padding-top: 100px;
    display: inline-block;


}


.testdiv_1809.main {

    height: 200px;
    width: 300px;
    background-color: lightblue;
    margin: auto;

}

.testdiv_1809.sub {

    background-color: red;
}


.main.testdiv_2109 { 
    height: 200px; 
    width: auto; 
    background-color: lightblue; 

}

.testdiv_2109.sub1 { 
    height: 100%; 
    width: 25%; 
    background-color: red;
    float: left;
}

.testdiv_2109.sub2 { 
    height: 100%; 
    width: auto; 
    background-color: blue;
    margin-left: 25%;
}


/* .class .class > parent child relation cant be reversed
chain can be reversed




*/